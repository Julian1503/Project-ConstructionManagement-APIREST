// <auto-generated />
using System;
using GestionObra.Infraestructura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GestionObra.Infraestructura.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190713162112_mysecondmigration")]
    partial class mysecondmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GestionObra.Dominio.Caja", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Diferencia")
                        .HasColumnType("Numeric");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("MontoApertura");

                    b.Property<decimal>("MontoCierre");

                    b.Property<decimal>("MontoSistema")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("UsuarioAperturaId");

                    b.Property<long?>("UsuarioCierreId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAperturaId");

                    b.HasIndex("UsuarioCierreId");

                    b.ToTable("Cajas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Banco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Bancos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "Banco Macro",
                            EstaEliminado = false
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = "Banco Nacion",
                            EstaEliminado = false
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "ICBC",
                            EstaEliminado = false
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "BBVA",
                            EstaEliminado = false
                        },
                        new
                        {
                            Id = 5L,
                            Descripcion = "Galicia",
                            EstaEliminado = false
                        },
                        new
                        {
                            Id = 6L,
                            Descripcion = "Santander Rio",
                            EstaEliminado = false
                        });
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Comprobante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Descuento")
                        .HasColumnType("Numeric");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("EmpresaId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("Monto")
                        .HasColumnType("Numeric");

                    b.Property<int>("NumeroComprobante");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("RubroId");

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("RubroId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comprobantes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comprobante");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.CondicionIva", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("CondicionIvas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.CuentaCorriente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BancoId");

                    b.Property<long>("ClienteId");

                    b.Property<long>("ComprobanteId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalCobrado")
                        .HasColumnType("Numeric");

                    b.Property<decimal>("TotalVendido")
                        .HasColumnType("Numeric");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ComprobanteId");

                    b.ToTable("CuentaCorrientes");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.DescripcionTarea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("DescripcionTareas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.DetalleCaja", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CajaId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<decimal>("Monto")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TipoPago");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.ToTable("DetalleCajas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.DetalleComprobante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<long>("ComprobanteId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("Numeric");

                    b.HasKey("Id");

                    b.HasIndex("ComprobanteId");

                    b.ToTable("DetalleComprobantes");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Empresa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CondicionIvaId");

                    b.Property<string>("Cuit");

                    b.Property<bool>("EstaEliminado");

                    b.Property<string>("Mail")
                        .HasMaxLength(60);

                    b.Property<string>("NombreFantasia")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasMaxLength(250);

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Sucursal")
                        .HasMaxLength(200);

                    b.Property<string>("Telefono")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CondicionIvaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.FormaPago", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ComprobanteId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<decimal>("Monto")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TipoFormaPago");

                    b.HasKey("Id");

                    b.HasIndex("ComprobanteId");

                    b.ToTable("FormaPagos");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.IngresoMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<int>("CantidadUsado");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("DateTime");

                    b.Property<long>("MaterialId");

                    b.Property<long>("ObraId");

                    b.Property<long>("PropietarioId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ObraId");

                    b.HasIndex("PropietarioId");

                    b.ToTable("IngresoMateriales");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasMaxLength(50);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<string>("Detalle")
                        .HasMaxLength(3000);

                    b.Property<bool>("EstaEliminado");

                    b.Property<string>("Path")
                        .HasMaxLength(400);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TipoMaterial");

                    b.HasKey("Id");

                    b.ToTable("Materiales");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Movimiento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CajaId");

                    b.Property<long>("ComprobanteId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("Monto")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TipoMovimento");

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("ComprobanteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Obra", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("EncargadoId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaEstimadaInicio")
                        .HasColumnType("DateTime");

                    b.Property<string>("Observiacion")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<long>("PropietarioId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("ZonaId");

                    b.HasKey("Id");

                    b.HasIndex("EncargadoId");

                    b.HasIndex("PropietarioId");

                    b.HasIndex("ZonaId");

                    b.ToTable("Obras");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Persona", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Celular")
                        .HasMaxLength(20);

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("DateTime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sexo");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Apellido = "Delgado",
                            Celular = "3815451043",
                            Dni = "39481311",
                            Email = "julianedelgado@hotmail.com",
                            EstaEliminado = false,
                            FechaNacimiento = new DateTime(1996, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Julian",
                            Sexo = 1,
                            Telefono = "4332244"
                        });
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Precio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("DateTime");

                    b.Property<long>("MaterialId");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Precios");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Presupuesto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstaEliminado");

                    b.Property<int>("EstadoPresupuesto");

                    b.Property<decimal>("ImprevistoPesos")
                        .HasColumnType("Numeric");

                    b.Property<decimal>("ImprevistoPorcentual")
                        .HasColumnType("Numeric");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Presupuestos");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.SalidaMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<long>("DeObraId");

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaEgreso")
                        .HasColumnType("DateTime");

                    b.Property<long>("MaterialId");

                    b.Property<long>("ParaObraId");

                    b.Property<long>("ResponsableId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DeObraId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParaObraId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("SalidaMateriales");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstaEliminado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("DateTime");

                    b.Property<long>("MaterialId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("StockActual");

                    b.Property<int>("StockMinimo");

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Tarea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DescripcionTareaId");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("Time");

                    b.Property<bool>("EstaEliminado");

                    b.Property<int>("Estado");

                    b.Property<int>("NumeroOrden");

                    b.Property<long>("ObraId");

                    b.Property<string>("Observacion")
                        .HasMaxLength(4000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<TimeSpan>("TiempoEmpleado")
                        .HasColumnType("Time");

                    b.HasKey("Id");

                    b.HasIndex("DescripcionTareaId");

                    b.HasIndex("ObraId");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.TipoGasto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("TipoGastos");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstaBloqueado")
                        .HasColumnType("bit");

                    b.Property<bool>("EstaEliminado");

                    b.Property<long>("LimitacionesId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("PersonaId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EstaBloqueado = false,
                            EstaEliminado = false,
                            LimitacionesId = 0L,
                            Password = "123456",
                            PersonaId = 1L,
                            UserName = "juliamm1503"
                        });
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Zona", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("GestionObra.Dominio.Gasto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EstaEliminado");

                    b.Property<decimal>("Monto")
                        .HasColumnType("Numeric");

                    b.Property<long>("PresupuestoId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("TipoGastoId");

                    b.HasKey("Id");

                    b.HasIndex("PresupuestoId");

                    b.HasIndex("TipoGastoId");

                    b.ToTable("Gastos");
                });

            modelBuilder.Entity("GestionObra.Dominio.Rubro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("EstaEliminado");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TipoRubro");

                    b.HasKey("Id");

                    b.ToTable("Rubros");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descripcion = "Banco",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 2L,
                            Descripcion = "Cheque",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 3L,
                            Descripcion = "Devolucion",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 4L,
                            Descripcion = "Inversión",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 5L,
                            Descripcion = "Otro",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 6L,
                            Descripcion = "Préstamo",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 7L,
                            Descripcion = "Ventas",
                            EstaEliminado = false,
                            TipoRubro = 1
                        },
                        new
                        {
                            Id = 8L,
                            Descripcion = "Anticipos",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 9L,
                            Descripcion = "Anticipos Administración",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 10L,
                            Descripcion = "Contratistas",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 11L,
                            Descripcion = "Depósito",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 12L,
                            Descripcion = "Gastos Administrativos",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 13L,
                            Descripcion = "Gastos Varios",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 14L,
                            Descripcion = "Honorarios Administración",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 15L,
                            Descripcion = "Honorarios Terceros",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 16L,
                            Descripcion = "Impuestos",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 17L,
                            Descripcion = "Limpieza Administración",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 18L,
                            Descripcion = "Limpieza Taller",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 19L,
                            Descripcion = "Mantenimiento",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 20L,
                            Descripcion = "Materiales",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 21L,
                            Descripcion = "Préstamo",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 22L,
                            Descripcion = " Refrigerios Administración",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 23L,
                            Descripcion = " Refrigerios Comercial",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 24L,
                            Descripcion = " Refrigerios Obras",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 25L,
                            Descripcion = "Repuestos",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 26L,
                            Descripcion = "Salarios",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 27L,
                            Descripcion = "Servicios",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 28L,
                            Descripcion = "Vehículo",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 29L,
                            Descripcion = "Viáticos Administración",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 30L,
                            Descripcion = "Viáticos Comercial",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 31L,
                            Descripcion = "Viáticos Taller",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 32L,
                            Descripcion = "Alquiler",
                            EstaEliminado = false,
                            TipoRubro = 2
                        },
                        new
                        {
                            Id = 33L,
                            Descripcion = "Otro",
                            EstaEliminado = false,
                            TipoRubro = 2
                        });
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.ComprobanteEntrada", b =>
                {
                    b.HasBaseType("GestionObra.Dominio.Entidades.Comprobante");

                    b.Property<int>("TipoComprobanteEntrada");

                    b.HasDiscriminator().HasValue("ComprobanteEntrada");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.ComprobanteSalida", b =>
                {
                    b.HasBaseType("GestionObra.Dominio.Entidades.Comprobante");

                    b.Property<int>("Perioricidad");

                    b.Property<int>("TipoComprobanteSalida");

                    b.HasDiscriminator().HasValue("ComprobanteSalida");
                });

            modelBuilder.Entity("GestionObra.Dominio.Caja", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "UsuarioApertura")
                        .WithMany("CajaApertura")
                        .HasForeignKey("UsuarioAperturaId")
                        .HasConstraintName("FK_CajaApertura_UsuarioApertura")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "UsuarioCierre")
                        .WithMany("CajaCierre")
                        .HasForeignKey("UsuarioCierreId")
                        .HasConstraintName("FK_CajaCierre_UsuarioCierre")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Comprobante", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Empresa", "Empresa")
                        .WithMany("Comprobantes")
                        .HasForeignKey("EmpresaId")
                        .HasConstraintName("FK_Comprobante_Empresa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Rubro", "Rubro")
                        .WithMany("Comprobantes")
                        .HasForeignKey("RubroId")
                        .HasConstraintName("FK_Comprobante_Rubro")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Comprobantes")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_Comprobante_Usuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.CuentaCorriente", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Banco", "Banco")
                        .WithMany("CuentaCorrientes")
                        .HasForeignKey("BancoId")
                        .HasConstraintName("FK_CuentaCorriente_Banco")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Empresa", "Cliente")
                        .WithMany("CuentaCorrientes")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_CuentaCorriente_Cliente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Comprobante", "Comprobante")
                        .WithMany("CuentaCorrientes")
                        .HasForeignKey("ComprobanteId")
                        .HasConstraintName("FK_CuentaCorriente_Comprobante")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.DetalleCaja", b =>
                {
                    b.HasOne("GestionObra.Dominio.Caja", "Caja")
                        .WithMany("DetalleCajas")
                        .HasForeignKey("CajaId")
                        .HasConstraintName("FK_DetalleCaja_Caja")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.DetalleComprobante", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Comprobante", "Comprobante")
                        .WithMany("DetalleComprobantes")
                        .HasForeignKey("ComprobanteId")
                        .HasConstraintName("FK_DetalleComprobante_Comprobante")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Empresa", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.CondicionIva", "CondicionIva")
                        .WithMany("Empresas")
                        .HasForeignKey("CondicionIvaId")
                        .HasConstraintName("FK_Empresa_CondicionIva");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.FormaPago", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Comprobante", "Comprobante")
                        .WithMany("FormaPagos")
                        .HasForeignKey("ComprobanteId")
                        .HasConstraintName("FK_FormaPago_Comprobante")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.IngresoMaterial", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Material", "Material")
                        .WithMany("IngresoMateriales")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_IngresoMaterial_Material")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Obra", "Obra")
                        .WithMany("IngresoMateriales")
                        .HasForeignKey("ObraId")
                        .HasConstraintName("FK_IngresoMaterial_Obra")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Empresa", "Propietario")
                        .WithMany("IngresoMateriales")
                        .HasForeignKey("PropietarioId")
                        .HasConstraintName("FK_IngresoMaterial_Propietario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Movimiento", b =>
                {
                    b.HasOne("GestionObra.Dominio.Caja", "Caja")
                        .WithMany("Movimientos")
                        .HasForeignKey("CajaId")
                        .HasConstraintName("FK_Movimiento_Caja")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Comprobante", "Comprobante")
                        .WithMany("Movimientos")
                        .HasForeignKey("ComprobanteId")
                        .HasConstraintName("FK_Movimiento_Comprobante")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Movimientos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_Movimiento_Usuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Obra", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Persona", "Encargado")
                        .WithMany("Obras")
                        .HasForeignKey("EncargadoId")
                        .HasConstraintName("FK_Obra_Encargado")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Empresa", "Empresa")
                        .WithMany("Obras")
                        .HasForeignKey("PropietarioId")
                        .HasConstraintName("FK_Obra_Propietario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Zona", "Zona")
                        .WithMany("Obras")
                        .HasForeignKey("ZonaId")
                        .HasConstraintName("FK_Obra_Zona");
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Precio", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Material", "Material")
                        .WithMany("Precios")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_Precio_Material")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Precios")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_Precio_Usuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.SalidaMaterial", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Obra", "DeObra")
                        .WithMany("SalidaMaterialesDe")
                        .HasForeignKey("DeObraId")
                        .HasConstraintName("FK_SalidaMaterialDe_DeObra")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Material", "Material")
                        .WithMany("SalidaMateriales")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_SalidaMaterial_Material")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Obra", "ParaObra")
                        .WithMany("SalidaMaterialesPara")
                        .HasForeignKey("ParaObraId")
                        .HasConstraintName("FK_SalidaMaterialPara_ParaObra")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Persona", "Responsable")
                        .WithMany("SalidaMateriales")
                        .HasForeignKey("ResponsableId")
                        .HasConstraintName("FK_SalidaMaterial_Responsable")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Stock", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Material", "Material")
                        .WithMany("Stocks")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_Stock_Material")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Stocks")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_Stock_Usuario")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Tarea", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.DescripcionTarea", "DescripcionTarea")
                        .WithMany("Tareas")
                        .HasForeignKey("DescripcionTareaId")
                        .HasConstraintName("FK_Tarea_DescripcionTarea")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.Obra", "Obra")
                        .WithMany("Tareas")
                        .HasForeignKey("ObraId")
                        .HasConstraintName("FK_Tarea_Obra")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Persona", "Persona")
                        .WithMany("Usuarios")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_Usuario_Persona")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GestionObra.Dominio.Gasto", b =>
                {
                    b.HasOne("GestionObra.Dominio.Entidades.Presupuesto", "Presupuesto")
                        .WithMany("Gastos")
                        .HasForeignKey("PresupuestoId")
                        .HasConstraintName("FK_Gasto_Presupuesto")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionObra.Dominio.Entidades.TipoGasto", "TipoGasto")
                        .WithMany("Gastos")
                        .HasForeignKey("TipoGastoId")
                        .HasConstraintName("FK_Gasto_TipoGasto")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
